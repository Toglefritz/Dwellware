// Mocks generated by Mockito 5.4.6 from annotations
// in household_ai_engineer/test/services/conversation/conversation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:household_ai_engineer/services/kiro/kiro_service.dart' as _i3;
import 'package:household_ai_engineer/services/kiro/models/kiro_status.dart'
    as _i5;
import 'package:household_ai_engineer/services/user_application/models/user_application.dart'
    as _i2;
import 'package:household_ai_engineer/services/user_application/user_application_service.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserApplication_0 extends _i1.SmartFake
    implements _i2.UserApplication {
  _FakeUserApplication_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [KiroService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKiroService extends _i1.Mock implements _i3.KiroService {
  MockKiroService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i4.Stream<_i5.KiroStatus> get statusUpdates =>
      (super.noSuchMethod(
            Invocation.getter(#statusUpdates),
            returnValue: _i4.Stream<_i5.KiroStatus>.empty(),
          )
          as _i4.Stream<_i5.KiroStatus>);

  @override
  _i4.Future<bool> checkAvailability() =>
      (super.noSuchMethod(
            Invocation.method(#checkAvailability, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> setupKiroForNewApplication() =>
      (super.noSuchMethod(
            Invocation.method(#setupKiroForNewApplication, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i6.ProcessResult> closeKiro() =>
      (super.noSuchMethod(
            Invocation.method(#closeKiro, []),
            returnValue: _i4.Future<_i6.ProcessResult>.value(
              _i7.dummyValue<_i6.ProcessResult>(
                this,
                Invocation.method(#closeKiro, []),
              ),
            ),
          )
          as _i4.Future<_i6.ProcessResult>);

  @override
  _i4.Future<void> sendMessage(String? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UserApplicationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApplicationService extends _i1.Mock
    implements _i8.UserApplicationService {
  MockUserApplicationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i2.UserApplication>> watchApplications({
    Duration? debounce = const Duration(milliseconds: 150),
    Duration? pollInterval = const Duration(seconds: 30),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watchApplications, [], {
              #debounce: debounce,
              #pollInterval: pollInterval,
            }),
            returnValue: _i4.Stream<List<_i2.UserApplication>>.empty(),
          )
          as _i4.Stream<List<_i2.UserApplication>>);

  @override
  _i4.Future<List<_i2.UserApplication>> refreshApplications() =>
      (super.noSuchMethod(
            Invocation.method(#refreshApplications, []),
            returnValue: _i4.Future<List<_i2.UserApplication>>.value(
              <_i2.UserApplication>[],
            ),
          )
          as _i4.Future<List<_i2.UserApplication>>);

  @override
  _i4.Future<String> createNewApplicationDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#createNewApplicationDirectory, []),
            returnValue: _i4.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#createNewApplicationDirectory, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i2.UserApplication> modifyApplication({
    required String? applicationId,
    required String? modifications,
    String? conversationId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#modifyApplication, [], {
              #applicationId: applicationId,
              #modifications: modifications,
              #conversationId: conversationId,
            }),
            returnValue: _i4.Future<_i2.UserApplication>.value(
              _FakeUserApplication_0(
                this,
                Invocation.method(#modifyApplication, [], {
                  #applicationId: applicationId,
                  #modifications: modifications,
                  #conversationId: conversationId,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.UserApplication>);

  @override
  _i4.Future<void> deleteApplication(String? applicationId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteApplication, [applicationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> launchApplication(String? applicationId) =>
      (super.noSuchMethod(
            Invocation.method(#launchApplication, [applicationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.UserApplication?> getApplicationById(String? applicationId) =>
      (super.noSuchMethod(
            Invocation.method(#getApplicationById, [applicationId]),
            returnValue: _i4.Future<_i2.UserApplication?>.value(),
          )
          as _i4.Future<_i2.UserApplication?>);

  @override
  _i4.Future<List<_i2.UserApplication>> getApplications() =>
      (super.noSuchMethod(
            Invocation.method(#getApplications, []),
            returnValue: _i4.Future<List<_i2.UserApplication>>.value(
              <_i2.UserApplication>[],
            ),
          )
          as _i4.Future<List<_i2.UserApplication>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
