{
    "info": {
      "name": "Kiro Communication Bridge API",
      "_postman_id": "9c9a1a1c-5b3e-4a5a-9b6f-kiro-bridge-collection",
      "description": "Postman collection for the local REST API that connects the Flutter frontend to the Kiro IDE.\n\nBase URL: http://localhost:3001\nAuth: Optional API key via Authorization: Bearer <key> or ?apiKey=<key>\nContent-Type: application/json",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
      { "key": "baseUrl", "value": "http://localhost:3001" },
      { "key": "apiKey", "value": "" },
      { "key": "authLocation", "value": "header", "type": "string", "description": "Set to 'header' or 'query' to control how the API key is sent." },
      { "key": "timeoutMs", "value": "30000" }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "type": "text/javascript",
          "exec": [
            "// Inject API key if provided, either in header or as query param",
            "const apiKey = pm.collectionVariables.get('apiKey');",
            "const mode = (pm.collectionVariables.get('authLocation') || 'header').toLowerCase();",
            "if (apiKey && apiKey.trim().length > 0) {",
            "  if (mode === 'header') {",
            "    pm.request.headers.upsert({ key: 'Authorization', value: 'Bearer ' + apiKey, disabled: false });",
            "  } else if (mode === 'query') {",
            "    // Add or update the apiKey query param",
            "    const u = new URL(pm.request.url.toString());",
            "    u.searchParams.set('apiKey', apiKey);",
            "    pm.request.url = u.toString();",
            "  }",
            "}",
            "// Ensure JSON content type for bodies",
            "if (pm.request.method !== 'GET') {",
            "  pm.request.headers.upsert({ key: 'Content-Type', value: 'application/json' });",
            "}"
          ]
        }
      }
    ],
    "item": [
      {
        "name": "Health Check",
        "request": {
          "method": "GET",
          "header": [],
          "url": { "raw": "{{baseUrl}}/health", "host": ["{{baseUrl}}"], "path": ["health"] },
          "description": "Checks if the local API server is running and healthy."
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', () => pm.response.code === 200);",
                "pm.test('Content-Type is JSON', () => pm.response.headers.get('Content-Type').includes('application/json'));",
                "const body = pm.response.json();",
                "pm.test('Server reports healthy', () => body.status === 'healthy');",
                "pm.test('Has server info', () => body.server && typeof body.server.port === 'number');"
              ]
            }
          }
        ]
      },
      {
        "name": "Get Kiro Status",
        "request": {
          "method": "GET",
          "header": [],
          "url": { "raw": "{{baseUrl}}/api/kiro/status", "host": ["{{baseUrl}}"], "path": ["api", "kiro", "status"] },
          "description": "Returns current Kiro IDE status, version, and available commands."
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', () => pm.response.code === 200);",
                "const body = pm.response.json();",
                "pm.test('Status is valid', () => ['ready','busy','unavailable'].includes(body.status));",
                "pm.test('Has timestamp', () => typeof body.timestamp === 'string');",
                "pm.test('availableCommands is array', () => Array.isArray(body.availableCommands));"
              ]
            }
          }
        ]
      },
      {
        "name": "Execute Kiro Command",
        "request": {
          "method": "POST",
          "header": [],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"command\": \"workbench.action.files.newUntitledFile\",\n  \"args\": []\n}"
          },
          "url": { "raw": "{{baseUrl}}/api/kiro/execute", "host": ["{{baseUrl}}"], "path": ["api", "kiro", "execute"] },
          "description": "Executes a Kiro/VS Code command. Customize `command`, optional `args`, and `workspacePath`."
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "const isJson = pm.response.headers.get('Content-Type')?.includes('application/json');",
                "pm.test('Content-Type is JSON', () => isJson === true);",
                "let body = {};",
                "try { body = pm.response.json(); } catch (e) {}",
                "pm.test('Has success flag', () => typeof body.success === 'boolean' || typeof body.code === 'string');",
                "if (pm.response.code === 200 && body.success) {",
                "  pm.test('Contains output or executionTimeMs', () => 'output' in body || 'executionTimeMs' in body);",
                "} else {",
                "  pm.test('Error payload has code & message', () => body.code && body.message);",
                "}",
                "// Save executionId from output if present (for input step scenarios, if the server returns it in output) â€” adjust if your bridge exposes it differently.",
                "if (body.executionId) { pm.collectionVariables.set('lastExecutionId', body.executionId); }"
              ]
            }
          }
        ]
      },
      {
        "name": "Execute Kiro Command (Invalid Example)",
        "request": {
          "method": "POST",
          "header": [],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"command\": \"invalid.command\",\n  \"args\": []\n}"
          },
          "url": { "raw": "{{baseUrl}}/api/kiro/execute", "host": ["{{baseUrl}}"], "path": ["api", "kiro", "execute"] },
          "description": "Demonstrates an error response (e.g., COMMAND_EXECUTION_FAILED)."
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "pm.test('Returns error status (4xx/5xx) or 200 with success=false', function () {",
                "  const s = pm.response.code;",
                "  const body = pm.response.json();",
                "  pm.expect((s >= 400 && s < 600) || body.success === false || !!body.code).to.be.true;",
                "});",
                "const body = pm.response.json();",
                "pm.test('Has error code/message', () => !!body.code && !!body.message);"
              ]
            }
          }
        ]
      },
      {
        "name": "Provide User Input",
        "request": {
          "method": "POST",
          "header": [],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"value\": \"yes\",\n  \"type\": \"confirmation\",\n  \"executionId\": \"{{lastExecutionId}}\"\n}"
          },
          "url": { "raw": "{{baseUrl}}/api/kiro/input", "host": ["{{baseUrl}}"], "path": ["api", "kiro", "input"] },
          "description": "Sends user input to an interactive command. Set {{lastExecutionId}} manually if not previously captured."
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', () => pm.response.code === 200);",
                "const body = pm.response.json();",
                "pm.test('Has success flag', () => typeof body.success === 'boolean');",
                "pm.test('Returns executionId (may be empty if invalid)', () => typeof body.executionId === 'string');"
              ]
            }
          }
        ]
      }
    ]
  }